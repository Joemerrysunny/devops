
#user  nobody;

##代码块中的events、http、server、location、upstream等都是块配置项##
##块配置项可以嵌套。内层块直接继承外层快，例如：server块里的任意配置都是基于http块里的已有配置的##
 
##Nginx worker进程运行的用户及用户组 
#语法：user username[groupname]    默认：user nobody nobody
#user用于设置master进程启动后，fork出的worker进程运行在那个用户和用户组下。当按照"user username;"设置时，用户组名与用户名相同。
#若用户在configure命令执行时，使用了参数--user=usergroup 和 --group=groupname,此时nginx.conf将使用参数中指定的用户和用户组。
#user  nobody;
 
##Nginx worker进程个数：其数量直接影响性能。
#每个worker进程都是单线程的进程，他们会调用各个模块以实现多种多样的功能。如果这些模块不会出现阻塞式的调用，那么，有多少CPU内核就应该配置多少个进程，反之，有可能出现阻塞式调用，那么，需要配置稍多一些的worker进程。

worker_processes  1;

##ssl硬件加速。
#用户可以用OpneSSL提供的命令来查看是否有ssl硬件加速设备：openssl engine -t

#ssl_engine device;


##守护进程(daemon)。是脱离终端在后台允许的进程。它脱离终端是为了避免进程执行过程中的信息在任何终端上显示。这样一来，进程也不会被任何终端所产生的信息所打断。##
##关闭守护进程的模式，之所以提供这种模式，是为了放便跟踪调试nginx，毕竟用gdb调试进程时最繁琐的就是如何继续跟进fork出的子进程了。##
##如果用off关闭了master_proccess方式，就不会fork出worker子进程来处理请求，而是用master进程自身来处理请求
#daemon off;   #查看是否以守护进程的方式运行Nginx 默认是on 
#master_process off; #是否以master/worker方式工作 默认是on


##error日志的设置#
#语法： error_log /path/file level;
#默认： error_log / log/error.log error;
#当path/file 的值为 /dev/null时，这样就不会输出任何日志了，这也是关闭error日志的唯一手段；
#leve的取值范围是debug、info、notice、warn、error、crit、alert、emerg从左至右级别依次增大。
#当level的级别为error时，error、crit、alert、emerg级别的日志就都会输出。大于等于该级别会输出，小于该级别的不会输出。
#如果设定的日志级别是debug，则会输出所有的日志，这一数据量会很大，需要预先确保/path/file所在的磁盘有足够的磁盘空间。级别设定到debug，必须在configure时加入 --with-debug配置项。

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;


##pid文件（master进程ID的pid文件存放路径）的路径

#pid        logs/nginx.pid;


events {

 #仅对指定的客户端输出debug级别的日志： 语法：debug_connection[IP|CIDR]
 #这个设置项实际上属于事件类配置，因此必须放在events{……}中才会生效。它的值可以是IP地址或者是CIRD地址。
 	#debug_connection 10.224.66.14;  #或是debug_connection 10.224.57.0/24
 #这样，仅仅以上IP地址的请求才会输出debug级别的日志，其他请求仍然沿用error_log中配置的日志级别。
 #注意：在使用debug_connection前，需确保在执行configure时已经加入了--with-debug参数，否则不会生效。

 #最大连接数  最大连接数算法 worker_processes（服务器核数） * worker_connections / 4  (采用漏桶算法，请求从大口流入，在从小口流出，让其慢慢缓存，一个轮训队列)
 #生产环境中worker_connections 建议值最好超过9000，计划将一台nginx 设置为10240，再观察一段时间。
 # 默认为1024
    worker_connections  1024;
}


##核心转储(coredump):在Linux系统中，当进程发生错误或收到信号而终止时，系统会将进程执行时的内存内容(核心映像)写入一个文件(core文件)，以作为调试只用，这就是所谓的核心转储(coredump)

http {
##嵌入其他配置文件 语法：include /path/file
#参数既可以是绝对路径也可以是相对路径（相对于Nginx的配置目录，即nginx.conf所在的目录）
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
    ##listen监听的端口
#语法：listen address:port [ default(deprecated in 0.8.21) | default_server | [ backlog=num | rcvbuf=size | sndbuf=size | accept_filter=filter | deferred | bind | ssl ] ]
#default_server: 如果没有设置这个参数，那么将会以在nginx.conf中找到的第一个server块作为默认server块

        listen       80;
#主机名称：其后可以跟多个主机名称，开始处理一个HTTP请求时，nginx会取出header头中的Host，与每个server中的server_name进行匹配，以此决定到底由那一个server来处理这个请求。有可能一个Host与多个server块中的server_name都匹配，这时会根据匹配优先级来选择实际处理的server块。server_name与Host的匹配优先级见文末。
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;


##location 语法： location [=|~|~*|^~] /uri/ { ... }
# location的使用实例见文末。
#注意：location时有顺序的，当一个请求有可能匹配多个location时，实际上这个请求会被第一个location处理。
			#location / {
			#	proxy_pass http://192.168.1.60;
	        #}


        location / {
            root   html;
            index  index.html index.htm;
        }


        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


}


##############################################################################################################
		#1.location的使用实例 —— 以root方式设置资源路径
    	#location /download/ {
        #   root    /opt/wab/html/;
		#} 
        # [[[意思是有一个请求的URL是 /download/index/test.html， 那么Web服务器就会返回服务器上 /opt/wab/html/download/index/test.html 文件的内容]]]



		#2.location的使用实例 —— 以alias方式设置资源路径
		#alias也是用来设置文件资源路径的，它与root不同点主要在于如何解读紧跟location后面的uri参数，这将会致使alias与root以不同的方式将用户请求映射到真正的磁盘文件上。

		#例如：如果有一个请求的URI是/conf/nginx.conf，而用户实际想访问的是 /usr/local/nginx/conf/nginx.conf，则两种方式如下：

		#alias：
        #      location  /conf {
		#				alias    /usr/local/nginx/conf
        #       }
		#
		#root:
		#		location    /conf {
		#					root    /usr/local/nginx
		#		}
		#使用alias时，在URI向实际文件路径的映射过程中，已经把location后配置的 /conf这部分字符串丢弃掉了，因此若path中不加/conf这部分，直接映射回的地址是   /usr/local/nginx/nginx.conf 与用户实际想访问的路径不符。root可以放置在http、server、location或if块中，而alias只能放置在location块中。

		#3.location的使用实例 —— 以index方式访问首页
		#有时，访问站点时的URI是/ ，这时返回网站的首页，而这与root和alias都不同。这里用ngx_http_index_module模块提供的index配置实现。index后可以跟多个文件参数，Nginx将会按照顺序来访问这些文件。

		#location  /　｛
　　　	#	root    path;
        #	index   /index.html　　　/html/index.php          /index.php
		#｝
		#接受到请求后，Nginx首先会尝试访问path/index.php 文件，如果可以访问，就直接返回文件内容结束请求，否则再试图返回path/html/index.php 文件的内容，以此类推。（从后向前）



		#通过Nginx实现请求转发,通过配置nginx.conf转发策略,使得本来访问tomcate:8080端口转交由访问nginx:8088端口
        #当客户端访问http://www.aaa.com时，由nginx转发给http://127.0.0.1:8080端口进行处理
        #配置hosts文件
        #    127.0.0.1 www.aaa.com
        #在nginx.conf中配置
        #
        #    http{
        #            #为nginx配置一个虚拟服务器,
        #            server {
        #                   #监听本机8088端口
        #                   listen 8088;
        #                   #接收对www.aaa.com主机名的访问
        #                   server_name www.aaa.com;
        #                   #对/即任意路径的访问进行处理
        #                   location / {
        #                           #转发到指定地址,tomcate访问地址
        #                           proxy_pass http://127.0.0.1:8080;
        #                   } 
        #                   #可以配置多个location
        #                   ...
        #           }
        #           #可以配置多个server
        #           ...
        #   }


    #     a. location路径的写法
    #   在配置虚拟服务器时，可以配置多个location，指定不同路径采用不同的处理方案，location支持多种写法，规则如下：
    #   1.  =   =/aaa/1.jpg 路径严格匹配，路径必须一模一样才会匹配到
    #   2.  ^~  ^~/aaa  只要是指定路径开头的路径都可以匹配
    #   3.  ~   ~.png$  区分大小写按正则匹配路径
    #   4.  ~*  ~*.png$ 不区分大小写按正则匹配路径
    #   5. /    /   通用匹配，所有路径都可以匹配到
    #   b. location路径配置的优先级
    #   由于location的路径配置非常灵活，所有有可能一个路径被多个location所匹配，此时按照如下规则判断匹配优先级：
    #       • 首先匹配 =
    #       • 其次匹配 ^~
    #       • 其次是按文件中顺序的正则匹配
    #       • 最后是交给 / 通用匹配
    #       • 当有匹配成功时候，停止匹配，按当前匹配规则处理请求
    #       ----总的规律是，精度越高优先级越高
    #   案例：
    #   location = / {
    #                #规则A
    #                       }
    #   location = /login {
    #               #规则B
    #                       }
    #   location ^~ /static/ {
    #                #规则C
    #                       }
    #   location ~ \.(gif|jpg|png|js|css)$ {
    #               #规则D
    #                       }
    #   location ~* \.png$ {
    #                        #规则E
    #                   }
    #   location / {
    #                        #规则F
    #                   }
    #  访问根目录 /， 比如 http://localhost/ 将匹配规则 A
    #  访问 http://localhost/login 将匹配规则 B
    #  http://localhost/register 则匹配规则 F
    #  访问 http://localhost/static/a.html 将匹配规则 C
    #  访问 http://localhost/a.gif, http://localhost/b.jpg 将匹配规则 D和规则 E，但是规则 D 顺序优先，规则 E不起作用
    #  http://localhost/static/c.png则优先匹配到规则 C
    #  访问 http://localhost/a.PNG 则匹配规则 E，而不会匹配规则 D，因为规则 E 不区分大小写
    #  访问 http://localhost/category/id/1111 则最终匹配到规则 F


##########################################################################
######################重点  nginx负载均衡的实现###########################
##########################################################################

#nginx在分发资源到后端服务器时，如何分配请求是可以配置的，称之为nginx的负载均衡策略。
#        轮询  默认不配置就是轮询   连接请求轮流分配给后端服务器
 #       http{ 
  #                          upstream sampleapp { 
   #                         server <<dns entry or IP Address(optional with port)>>; 
    #                        server <<another dns entry or IP Address(optional with port)>>; 
     #                       } 
      #                      .... 
       #                     server{ 
        #                            listen 80; 
 #                                   ... 
#                                    location / { 
  #                                          proxy_pass http://sampleapp; 
   #                         }  
     #               } 
      #  ip哈希    ip_hash;    abs(客户端ip.hash())%服务器数量，根据余数决定连接请求去往哪个服务器
       # http{ 
        #                    upstream sampleapp { 
         #                   ip_hash; 
          #                  server <<dns entry or IP Address(optional with port)>>; 
           #                 server <<another dns entry or IP Address(optional with port)>>; 
            #                } 
             #               .... 
              #              server{ 
 #                                   listen 80; 
  #                                  ... 
   #                                 location / { 
    #                                proxy_pass http://sampleapp; 
     #                       }  
      #              } 
       # 最少连接    least_conn; 将连接请求分配给目前连接数最少的服务器
        #http{ 
         #                  least_conn; 
          #                  server <<dns entry or IP Address(optional with port)>>; 
           #                 server <<another dns entry or IP Address(optional with port)>>; 
            #                } 
             #               .... 
              #              server{ 
               #                     listen 80; 
                #                    ... 
                 #                   location / { 
                  #                  proxy_pass http://sampleapp; 
                   #         }  
                    #} 
#        基于权重    直接在地址后配置weight=x    根据权重进行分配，权重值越大，被分配的连接越多。可以直接配置为down，则不再分配连接。    
 #       http{ 
  #                          upstream sampleapp { 
   #                                 server <<dns entry or IP Address(optional with port)>> weight=2; 
    #                                server <<another dns entry or IP Address(optional with port)>> weight=5; 
     #                               server <<another dns entry or IP Address(optional with port)>> down;
      #                      } 
       #                     .... 
        #                    server{ 
         #                           listen 80; 
          #                          ... 
           #                         location / { 
            #                        proxy_pass http://sampleapp; 
             #               } 
              #      } 



#################################################
#############动静分离############################
#################################################
# a. 动静分离原理
 #       动 --> 动态资源  --> servlet jsp --> 程序 
  #      静 --> 静态资源 --> jpg mp3 mp4 html css js --> 文件 
   #    
 #   tomcat能够处理动态和静态资源，但本质上是为处理动态资源而设计的服务器，过多静态资源交由tomcat管理会降低tomcat处理动态资源的能力，得不偿失。
#
 #       nginx本身无法处理动态资源，但可以处理静态资源，而且性能优良。
#
 #       #因此可以将静态资源和动态资源拆分，将静态资源交由ngin处理，动态资源仍由tomcat处理，从而解放了tomcat对动态资源的处理能力，整体上实现动静分离，提升了效率。
   #     b. 动静分离实现
    #    配置方式：
     #       server {
      #              listen 8088;
       #             server_name www.aaa.com;
        #            location / {
         #                   #root可以指向nginx服务器中的本地磁盘地址
          #                  #静态文件就放置在这个磁盘地址中
           #                 #之后对server中资源的访问会被转换到对本地磁盘资源的访问
            #                                    #www.aaa.com/aaa/bbb/1.html-->d://html/aaa/bbb/1.html
             #               root D://html;
              #              #默认访问的首页配置
               #             index index.html;
 #                   } 
  #          }









